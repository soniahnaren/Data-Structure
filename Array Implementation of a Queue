#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 10

// Structure to represent the queue
typedef struct {
    int data[MAX_SIZE];
    int front, rear;
} Queue;

// Function to initialize the queue
void initialize(Queue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if the queue is empty
bool isEmpty(Queue *queue) {
    return (queue->front == -1 && queue->rear == -1);
}

// Function to check if the queue is full
bool isFull(Queue *queue) {
    return ((queue->rear + 1) % MAX_SIZE == queue->front);
}

// Function to enqueue an element
void enqueue(Queue *queue, int element) {
    if (isFull(queue)) {
        printf("Queue Overflow: Cannot enqueue %d, queue is full.\n", element);
        return;
    }

    if (isEmpty(queue)) {
        queue->front = 0;  // Set front to 0 if the queue is empty
    }

    queue->rear = (queue->rear + 1) % MAX_SIZE;  // Circular increment
    queue->data[queue->rear] = element;

    printf("Enqueued %d into the queue.\n", element);
}

// Function to dequeue an element
int dequeue(Queue *queue) {
    int dequeuedElement;

    if (isEmpty(queue)) {
        printf("Queue Underflow: Cannot dequeue, queue is empty.\n");
        return -1;  // Return a special value to indicate underflow
    }

    dequeuedElement = queue->data[queue->front];

    if (queue->front == queue->rear) {
        // Reset front and rear to -1 if the last element is dequeued
        queue->front = -1;
        queue->rear = -1;
    } else {
        queue->front = (queue->front + 1) % MAX_SIZE;  // Circular increment
    }

    printf("Dequeued %d from the queue.\n", dequeuedElement);
    return dequeuedElement;
}

// Function to display the elements of the queue
void display(Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    int i = queue->front;

    do {
        printf("%d ", queue->data[i]);
        i = (i + 1) % MAX_SIZE;  // Circular increment
    } while (i != (queue->rear + 1) % MAX_SIZE);

    printf("\n");
}

int main() {
    Queue queue;
    initialize(&queue);

    int choice, element;

    do {
        // Display menu
        printf("\nMenu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to enqueue: ");
                scanf("%d", &element);
                enqueue(&queue, element);
                break;
            case 2:
                dequeue(&queue);
                break;
            case 3:
                display(&queue);
                break;
            case 4:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }

    } while (choice != 4);

    return 0;
}
